<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tobii.Gaze.Core.Net</name>
    </assembly>
    <members>
        <member name="T:Tobii.Gaze.Core.Calibration">
            <summary>
            Calibration Object holding the calibration data
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.Calibration.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.Calibration"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.Calibration.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.Calibration"/> class.
            </summary>
            <param name="calibrationBlob">The calibration blob (native).</param>
        </member>
        <member name="M:Tobii.Gaze.Core.Calibration.GetData">
            <summary>
            Gets the raw calibration data.
            </summary>
            <returns>The calibration data in a byte array.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Calibration.GetCalibrationPointDataItems">
            <summary>
            Translates the raw calibration data to a list of calibration plot items
            </summary>
            <returns>An array of plot items.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Calibration.ToInternalCalibration">
            <summary>
            Converts this instance to an internal calibration.
            </summary>
            <returns>An internal type instance.</returns>
        </member>
        <member name="T:Tobii.Gaze.Core.CalibrationPointData">
            <summary>
            This class holds information about a calibration point sample.
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.CalibrationPointData.#ctor(Tobii.Gaze.Core.Point2D,Tobii.Gaze.Core.Point2D,Tobii.Gaze.Core.CalibrationPointStatus,Tobii.Gaze.Core.Point2D,Tobii.Gaze.Core.CalibrationPointStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.CalibrationPointData"/> struct.
            </summary>
            <param name="truePosition">The true position.</param>
            <param name="leftMapPosition">The left map position.</param>
            <param name="leftStatus">The left status.</param>
            <param name="rightMapPosition">The right map status.</param>
            <param name="rightStatus">The right status.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.CalibrationPointData.#ctor(Tobii.Gaze.Core.Internal.DataTypes.InternalCalibrationPointData)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.CalibrationPointData"/> struct.
            </summary>
            <param name="p">The p.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.CalibrationPointData.op_Equality(Tobii.Gaze.Core.CalibrationPointData,Tobii.Gaze.Core.CalibrationPointData)">
            <summary>
            Determines if CalibrationPointData point1 is equal to CalibrationPointData point2.
            </summary>
            <param name="point1">First instance in comparison.</param>
            <param name="point2">Second instance in comparison.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.CalibrationPointData.op_Inequality(Tobii.Gaze.Core.CalibrationPointData,Tobii.Gaze.Core.CalibrationPointData)">
            <summary>
            Determines if CalibrationPointData point1 is not equal to CalibrationPointData point2.
            </summary>
            <param name="point1">First instance in comparison.</param>
            <param name="point2">Second instance in comparison.</param>
            <returns>Returns true if instances are not equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.CalibrationPointData.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Other object instance.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.CalibrationPointData.Equals(Tobii.Gaze.Core.CalibrationPointData)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="other">Other CalibrationPointData instance.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.CalibrationPointData.GetHashCode">
            <summary>
            Returns the hash code of the instance.
            </summary>
            <returns>The hash code of the instance.</returns>
        </member>
        <member name="P:Tobii.Gaze.Core.CalibrationPointData.TruePosition">
            <summary>
            Gets the point in normalized coordinates on the display area where the calibration stimulus was displayed.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.CalibrationPointData.LeftMapPosition">
            <summary>
            Gets the left eye gaze point in normalized coordinates on the display area after calibration.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.CalibrationPointData.LeftStatus">
            <summary>
            Gets the status code containing information about the validity and usage of the left eye data.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.CalibrationPointData.RightMapPosition">
            <summary>
            Gets the right eye gaze point in normalized coordinates on the display area after calibration.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.CalibrationPointData.RightStatus">
            <summary>
            Gets the status code containing information about the validity and usage of the right eye data.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.DeviceInfo">
            <summary>
            Device info for an eye tracker.
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.DeviceInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.DeviceInfo"/> struct.
            </summary>
            <param name="serialNumber">Serial number of the eye tracker</param>
            <param name="model">Eye tracker model</param>
            <param name="generation">Eye tracker generation identifier</param>
            <param name="firmwareVersion">Firmware version</param>
        </member>
        <member name="M:Tobii.Gaze.Core.DeviceInfo.#ctor(Tobii.Gaze.Core.Internal.DataTypes.InternalDeviceInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.DeviceInfo"/> struct.
            </summary>
            <param name="d">The d.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.DeviceInfo.#ctor(Tobii.Gaze.Core.Internal.DataTypes.InternalUsbDeviceInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.DeviceInfo"/> struct.
            </summary>
            <param name="d">The d.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.DeviceInfo.op_Equality(Tobii.Gaze.Core.DeviceInfo,Tobii.Gaze.Core.DeviceInfo)">
            <summary>
            Determines if DeviceInfo deviceInfo1 is equal to DeviceInfo deviceInfo2.
            </summary>
            <param name="deviceInfo1">First instance in comparison.</param>
            <param name="deviceInfo2">Second instance in comparison.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.DeviceInfo.op_Inequality(Tobii.Gaze.Core.DeviceInfo,Tobii.Gaze.Core.DeviceInfo)">
            <summary>
            Determines if DeviceInfo deviceInfo1 is not equal to DeviceInfo deviceInfo2.
            </summary>
            <param name="deviceInfo1">First instance in comparison.</param>
            <param name="deviceInfo2">Second instance in comparison.</param>
            <returns>Returns true if instances are not equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.DeviceInfo.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Other object instance.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.DeviceInfo.Equals(Tobii.Gaze.Core.DeviceInfo)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="other">Other DeviceInfo instance.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.DeviceInfo.GetHashCode">
            <summary>
            Returns the hash code of the instance.
            </summary>
            <returns>The hash code of the instance.</returns>
        </member>
        <member name="P:Tobii.Gaze.Core.DeviceInfo.SerialNumber">
            <summary>Gets the serial number of the eye tracker.</summary>
        </member>
        <member name="P:Tobii.Gaze.Core.DeviceInfo.Model">
            <summary>Gets the eye tracker model, e.g. "REX_DEV_Laptop".</summary>
        </member>
        <member name="P:Tobii.Gaze.Core.DeviceInfo.Generation">
            <summary>Gets the eye tracker generation identifier, e.g. G5.</summary>
        </member>
        <member name="P:Tobii.Gaze.Core.DeviceInfo.FirmwareVersion">
            <summary>Gets the eye tracker firmware version.</summary>
        </member>
        <member name="T:Tobii.Gaze.Core.DisplayArea">
            <summary>
            This struct holds a display area
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.DisplayArea.#ctor(Tobii.Gaze.Core.Point3D,Tobii.Gaze.Core.Point3D,Tobii.Gaze.Core.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.DisplayArea"/> struct.
            </summary>
            <param name="topLeft">The top left.</param>
            <param name="topRight">The top right.</param>
            <param name="bottomLeft">The bottom left.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.DisplayArea.#ctor(Tobii.Gaze.Core.Internal.DataTypes.InternalDisplayArea)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.DisplayArea"/> struct.
            </summary>
            <param name="internalDisplayArea">The internal display area.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.DisplayArea.op_Equality(Tobii.Gaze.Core.DisplayArea,Tobii.Gaze.Core.DisplayArea)">
            <summary>
            Determines if DisplayArea displayArea1 is equal to DisplayArea displayArea2.
            </summary>
            <param name="displayArea1">First instance in comparison.</param>
            <param name="displayArea2">Second instance in comparison.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.DisplayArea.op_Inequality(Tobii.Gaze.Core.DisplayArea,Tobii.Gaze.Core.DisplayArea)">
            <summary>
            Determines if DisplayArea displayArea1 is not equal to DisplayArea displayArea2.
            </summary>
            <param name="displayArea1">First instance in comparison.</param>
            <param name="displayArea2">Second instance in comparison.</param>
            <returns>Returns true if instances are not equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.DisplayArea.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Other object instance.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.DisplayArea.Equals(Tobii.Gaze.Core.DisplayArea)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="other">Other DisplayArea instance.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.DisplayArea.GetHashCode">
            <summary>
            Returns the hash code of the instance.
            </summary>
            <returns>The hash code of the instance.</returns>
        </member>
        <member name="P:Tobii.Gaze.Core.DisplayArea.TopLeft">
            <summary>
            Gets the top left.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.DisplayArea.TopRight">
            <summary>
            Gets the top right.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.DisplayArea.BottomLeft">
            <summary>
            Gets the bottom left.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.ErrorCode">
            <summary>
            Enum containing error codes returned from the calls to the native layer.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.Success">
            <summary>
            Indicates success.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.UnknownError">
            <summary>
            Generic error.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.OutOfMemory">
            <summary>
            Generic error.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.BufferTooSmall">
            <summary>
            Generic error.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.InvalidParameter">
            <summary>
            Generic error.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.Timeout">
            <summary>
            Sync function error.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.OperationAborted">
            <summary>
            Sync function error.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.InvalidUrl">
            <summary>
            Transport error.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.EndpointNameLookupFailed">
            <summary>
            Transport error.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.EndpointConnectFailed">
            <summary>
            Transport error.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.DeviceCommunicationError">
            <summary>
            Transport error.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.AlreadyConnected">
            <summary>
            Transport error.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.NotConnected">
            <summary>
            Transport error.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.TimeSyncCommunicationError">
            <summary>
            Transport error.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.ProtocolDecodingError">
            <summary>
            Protocol error.
            </summary>        
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.ProtocolVersionError">
            <summary>
            Protocol version error.
            </summary>        
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.ConfigNotInitialized">
            <summary>
            Configuration error.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.TobiiEyeTrackingNotAvailable">
            <summary>
            Configuration error.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.TobiiEyeTrackingIncompatible">
            <summary>
            Configuration error.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.ConfigIncomplete">
            <summary>
            Configuration error.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.ConfigInvalidMonitor">
            <summary>
            Configuration error.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.ConfigUserProfileNotSet">
            <summary>
            Configuration error.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.ConfigNoCalibration">
            <summary>
            Configuration error.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.FirmwareUnknownOperation">
            <summary>
            Error from eye tracker firmware.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.FirmwareUnsupportedOperation">
            <summary>
            Error from eye tracker firmware.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.FirmwareOperationFailed">
            <summary>
            Error from eye tracker firmware.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.FirmwareInvalidPayload">
            <summary>
            Error from eye tracker firmware.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.FirmwareUnknownId">
            <summary>
            Error from eye tracker firmware.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.FirmwareUnauthorized">
            <summary>
            Error from eye tracker firmware.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.FirmwareExtensionRequired">
            <summary>
            Error from eye tracker firmware.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.FirmwareInternalError">
            <summary>
            Error from eye tracker firmware.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.FirmwareStateError">
            <summary>
            Error from eye tracker firmware.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.FirmwareInvalidParameter">
            <summary>
            Error from eye tracker firmware.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.ErrorCode.FirmwareOperationAborted">
            <summary>
            Error from eye tracker firmware.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.ExtendedEyeTracker">
            <summary>
            Eye tracker with extra operations. For internal use only.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.EyeTracker">
            <summary>
            Implements the IEyeTracker interface by wrapping the C API.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.IEyeTracker">
            <summary>
            Interface making up the access point to eye tracker related functionality.
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.BreakEventLoop">
            <summary>
            Breaks the event loop. This will make the blocking <see cref="M:Tobii.Gaze.Core.IEyeTracker.RunEventLoop"/> call return. 
            Must NOT be called from a callback.
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.Connect">
            <summary>
            Connects to eye tracker synchronously.
            Throws EyeTrackerException if not successful
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.ConnectAsync(Tobii.Gaze.Core.CompletionStatusCallback)">
            <summary>
            Connects to eye tracker asynchronously.       
            </summary>
            <param name="completionStatusCallback">
            A callback function that will be called on command completion.
            </param>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.Disconnect">
            <summary>
            Disconnect from eye tracker synchronously.
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.DisconnectAsync(Tobii.Gaze.Core.CompletionCallback)">
            <summary>
            Disconnects from eye tracker asynchronously.
            </summary>
            <param name="completionCallback">
            A callback function that will be called on command completion.
            </param>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.GetDeviceInfo">
            <summary>
            Gets the device info, such as platform, versions etc, synchronously.
            Throws EyeTrackerException if not successful.
            </summary>
            <returns>The device info.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.GetDeviceInfoAsync(Tobii.Gaze.Core.DeviceInfoCallback)">
            <summary>
            Gets the device info, such as platform, versions etc, asynchronously.
            </summary>
            <param name="deviceInfoCallback">
            A callback function that will be called on command completion.
            </param>
            <exception cref="T:Tobii.Gaze.Core.EyeTrackerException">Throws EyeTrackerException if not successful.</exception>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.GetTrackBox">
            <summary>
            Gets the track box synchronously.
            </summary>
            <returns>The track box.</returns>
            <exception cref="T:Tobii.Gaze.Core.EyeTrackerException">Throws EyeTrackerException if not successful.</exception>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.GetTrackBoxAsync(Tobii.Gaze.Core.TrackBoxCallback)">
            <summary>
            Gets the track box asynchronously.
            </summary>
            <param name="trackBoxCallback">
            A callback function that will be called on command completion.
            </param>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.GetGeometryMountingAsync(Tobii.Gaze.Core.GeometryMountingCallback)">
            <summary>
            Gets the mounting geometry asynchronously.
            </summary>
            <param name="geometryMountingCallback">
            A callback function that will be called on command completion.
            </param>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.GetGeometryMounting">
            <summary>
            Gets the mounting geometry synchronously.
            </summary>
            <returns>The mounting geometry.</returns>
            <exception cref="T:Tobii.Gaze.Core.EyeTrackerException">Throws EyeTrackerException if not successful.</exception>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.RegisterKeyProvider(Tobii.Gaze.Core.KeyProviderCallback)">
            <summary>
            Registers a callback providing a key for unlocking the eye tracker. The Tobii Gaze Core library unlocks developer edition
            eye trackers automatically; this function can be used to unlock other eye trackers. Registering a key provider disables the built-in default key.
            </summary>
            <param name="keyProviderCallback">The key for unlocking</param>
            <exception cref="T:Tobii.Gaze.Core.EyeTrackerException">Throws EyeTrackerException if not successful.</exception>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.RunEventLoop">
            <summary>
            Runs the event loop. This is a blocking call and must be called on a dedicated thread.
            </summary>
            <exception cref="T:Tobii.Gaze.Core.EyeTrackerException">Throws EyeTrackerException if not successful.</exception>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.RunEventLoopOnInternalThread(Tobii.Gaze.Core.CompletionStatusCallback)">
            <summary>
            Runs the event loop on asynchronously. That is, it creates a thread internally on which the event loops run.
            </summary>
            <param name="completionStatusCallback">A callback function that will be called when the run loop exits.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.StartTracking">
            <summary>
            Starts gaze tracking synchronously. 
            When available, the Gaze data will be delivered with the GazeData event handler.
            </summary>
            <exception cref="T:Tobii.Gaze.Core.EyeTrackerException">Throws EyeTrackerException if not successful.</exception>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.StartTrackingAsync(Tobii.Gaze.Core.CompletionStatusCallback)">
            <summary>
            Starts gaze tracking asynchronously. 
            When available, the Gaze data will be delivered with the GazeData event handler.
            </summary>
            <param name="completionStatusCallback">
            A callback function that will be called on command completion.
            </param>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.StopTracking">
            <summary>
            Stops gaze tracking asynchronously. 
            When available, the Gaze data will be delivered with the GazeData event handler.
            </summary>
            <exception cref="T:Tobii.Gaze.Core.EyeTrackerException">Throws EyeTrackerException if not successful.</exception>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.StopTrackingAsync(Tobii.Gaze.Core.CompletionStatusCallback)">
            <summary>
            Stops gaze tracking asynchronously. 
            When available, the Gaze data will be delivered with the GazeData event handler.
            </summary>
            <param name="completionStatusCallback">
            A callback function that will be called on command completion.
            </param>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.StartCalibrationAsync(Tobii.Gaze.Core.CompletionStatusCallback)">
            <summary>
            Starts the calibration routine asynchronously.
            </summary>
            <param name="completionStatusCallback">
            A callback function that will be called on command completion.
            </param>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.StopCalibrationAsync(Tobii.Gaze.Core.CompletionStatusCallback)">
            <summary>
            Stops the calibration routine asynchronously.
            </summary>
            <param name="completionStatusCallback">
            A callback function that will be called on command completion.
            </param>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.AddCalibrationPointAsync(Tobii.Gaze.Core.Point2D,Tobii.Gaze.Core.CompletionStatusCallback)">
            <summary>
            Adds a point for calibration asynchronously.
            </summary>
            <param name="point">
            A two dimensional point in screen coordinates (0.0 - 1.0) where the user's gaze is expected to be.
            </param>
            <param name="completionStatusCallback">
            A callback function that will be called on command completion.
            </param>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.RemoveCalibrationPointAsync(Tobii.Gaze.Core.Point2D,Tobii.Gaze.Core.CompletionStatusCallback)">
            <summary>
            Removes a point for calibration asynchronously.
            </summary>
            <param name="point">
            A two dimensional point in screen size percentage which has previously been added to the calibration but which should now be removed.
            </param>
            <param name="completionStatusCallback">
            A callback function that will be called on command completion.
            </param>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.ComputeAndSetCalibrationAsync(Tobii.Gaze.Core.CompletionStatusCallback)">
            <summary>
            Computes the calibration based on the previously processed points asynchronously. This calibration will be set as the active one if it succeeds.
            If the computed calibration does not have enough data it will fail with the error code ErrorCodes.FirmwareOperationFailed via the callback.
            </summary>
            <param name="completionStatusCallback">
            A callback function that will be called on command completion.
            </param>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.GetCalibrationAsync(Tobii.Gaze.Core.CalibrationCallback)">
            <summary>
            Gets current calibration asynchronously. This can be stored away and set later using <see cref="M:Tobii.Gaze.Core.IEyeTracker.SetCalibrationAsync(Tobii.Gaze.Core.Calibration,Tobii.Gaze.Core.CompletionStatusCallback)"/>.
            </summary>
            <param name="calibrationCallback">
            A callback function that will be called on command completion.
            </param>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.SetCalibrationAsync(Tobii.Gaze.Core.Calibration,Tobii.Gaze.Core.CompletionStatusCallback)">
            <summary>
            Sets calibration asynchronously. 
            </summary>
            <param name="calibration">The calibration to set, this must be valid until completionStatusCallback is called.</param>
            <param name="completionStatusCallback">
            A callback function that will be called on command completion.
            </param>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.GetCalibration">
            <summary>
            Gets current calibration synchronously. This can be stored away and set later using <see cref="M:Tobii.Gaze.Core.IEyeTracker.SetCalibration(Tobii.Gaze.Core.Calibration)"/>.
            </summary>
            <returns>The calibration data.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.SetCalibration(Tobii.Gaze.Core.Calibration)">
            <summary>
            Sets calibration synchronously. 
            </summary>
            <param name="calibration">The calibration</param>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.GetDisplayAreaAsync(Tobii.Gaze.Core.DisplayAreaCallback)">
            <summary>
            Get the display area of the device asynchronously.
            </summary>
            <param name="displayAreaCallback">
             A callback function that will be called on command completion.
            </param>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.SetDisplayAreaAsync(Tobii.Gaze.Core.DisplayArea,Tobii.Gaze.Core.CompletionStatusCallback)">
            <summary>
            Sets the display area of the device asynchronously.
            </summary>
            <param name="displayArea">The display area</param>
            <param name="completionStatusCallback">
            A callback function that will be called on command completion. 
            The callback will return errorCode <see cref="F:Tobii.Gaze.Core.ErrorCode.FirmwareUnsupportedOperation"/>, if the connected Eye Tracker does not support the operation.
            </param>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.GetDisplayArea">
            <summary>
            Get the display area of the device synchronously.
            </summary>
            <returns>The display area.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.SetDisplayArea(Tobii.Gaze.Core.DisplayArea)">
            <summary>
            Set the display area of the device synchronously.
            Throws <see cref="T:Tobii.Gaze.Core.EyeTrackerException"/> if not successful, where errorCode will be <see cref="F:Tobii.Gaze.Core.ErrorCode.FirmwareUnsupportedOperation"/>. 
            if the connected Eye Tracker does not support the operation.         
            </summary>
            <param name="displayArea">The display area</param>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.SendCustomCommand(System.Byte[],System.Byte[])">
            <summary>
            Sends a custom command to the eye tracker.        
            </summary>
            <param name="inData">A buffer containing the data to be sent.</param>
            <param name="outData">
            A pre-allocated buffer that will contain the reply data. It is up to the caller to allocate a byte array
            big enough to contain the expected reply.
            </param>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.SendCustomCommandAsync(System.Byte[],Tobii.Gaze.Core.CustomCommandCallback)">
            <summary>
            Sends a custom command to the eye tracker.        
            </summary>
            <param name="inData">A buffer containing the data to be sent.</param>
            <param name="customCommandCallback">A callback function that will be called on command completion.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTracker.SetOption(Tobii.Gaze.Core.EyeTrackerOption,System.Byte[])">
            <summary>
            Sends a custom command to the eye tracker.        
            </summary>
            <param name="opt">The option to set</param>
            <param name="value">A buffer containing the value of the option to set.</param>
        </member>
        <member name="E:Tobii.Gaze.Core.IEyeTracker.EyeTrackerError">
            <summary>
            Reports error code when a spontaneous error occurs (an error not directly associated with a command). 
            Most likely this error is related to problems with the eye tracker communication and is unrecoverable.
            </summary>
        </member>
        <member name="E:Tobii.Gaze.Core.IEyeTracker.GazeData">
            <summary>
            Provides eye tracking gaze data when available.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.IEyeTracker.Uri">
            <summary>
            Gets the URI associated with the eye tracker.
            Throws EyeTrackerException if not successful.
            </summary>        
        </member>
        <member name="P:Tobii.Gaze.Core.IEyeTracker.Connected">
            <summary>
            Gets a value indicating whether the eye tracker is connected or not.
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.EyeTracker"/> class.
            Throws EyeTrackerException if creation fails.
            </summary>
            <param name="uri">A Uri identifying the eye tracker.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.Dispose">
            <summary>
            Destroys eye tracker instance. Must NOT be called from a callback.        
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.ConnectAsync(Tobii.Gaze.Core.CompletionStatusCallback)">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.ConnectAsync(Tobii.Gaze.Core.CompletionStatusCallback)"/>.</summary>
            <param name="completionStatusCallback">Parameter completionStatusCallback documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.ConnectAsync(Tobii.Gaze.Core.CompletionStatusCallback)"/>.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.Connect">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.Connect"/>.</summary>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.DisconnectAsync(Tobii.Gaze.Core.CompletionCallback)">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.DisconnectAsync(Tobii.Gaze.Core.CompletionCallback)"/>.</summary>
            <param name="completionCallback">Parameter completionCallback documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.DisconnectAsync(Tobii.Gaze.Core.CompletionCallback)"/>.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.Disconnect">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.Disconnect"/>.</summary>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.RunEventLoop">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.RunEventLoop"/>.</summary>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.RunEventLoopOnInternalThread(Tobii.Gaze.Core.CompletionStatusCallback)">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.RunEventLoopOnInternalThread(Tobii.Gaze.Core.CompletionStatusCallback)"/>.</summary>
            <param name="completionStatusCallback">Parameter completionStatusCallback documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.RunEventLoopOnInternalThread(Tobii.Gaze.Core.CompletionStatusCallback)"/>.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.BreakEventLoop">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.BreakEventLoop"/>.</summary>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.StartTrackingAsync(Tobii.Gaze.Core.CompletionStatusCallback)">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.StartTrackingAsync(Tobii.Gaze.Core.CompletionStatusCallback)"/>.</summary>
            <param name="completionStatusCallback">Parameter completionStatusCallback documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.StartTrackingAsync(Tobii.Gaze.Core.CompletionStatusCallback)"/>.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.StartTracking">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.StartTracking"/>.</summary>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.StopTrackingAsync(Tobii.Gaze.Core.CompletionStatusCallback)">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.StopTrackingAsync(Tobii.Gaze.Core.CompletionStatusCallback)"/>.</summary>
            <param name="completionStatusCallback">Parameter completionStatusCallback documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.StopTrackingAsync(Tobii.Gaze.Core.CompletionStatusCallback)"/>.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.StopTracking">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.StopTracking"/>.</summary>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.GetDeviceInfoAsync(Tobii.Gaze.Core.DeviceInfoCallback)">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.GetDeviceInfoAsync(Tobii.Gaze.Core.DeviceInfoCallback)"/>.</summary>
            <param name="deviceInfoCallback">Parameter deviceInfoCallback documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.GetDeviceInfoAsync(Tobii.Gaze.Core.DeviceInfoCallback)"/>.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.GetDeviceInfo">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.GetDeviceInfo"/>.</summary>
            <returns>Return value documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.GetDeviceInfo"/>.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.GetTrackBoxAsync(Tobii.Gaze.Core.TrackBoxCallback)">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.GetTrackBoxAsync(Tobii.Gaze.Core.TrackBoxCallback)"/>.</summary>
            <param name="trackBoxCallback">Parameter trackBoxCallback documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.GetTrackBoxAsync(Tobii.Gaze.Core.TrackBoxCallback)"/>.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.GetTrackBox">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.GetTrackBox"/>.</summary>
            <returns>Return value documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.GetTrackBox"/>.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.GetGeometryMountingAsync(Tobii.Gaze.Core.GeometryMountingCallback)">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.GetGeometryMountingAsync(Tobii.Gaze.Core.GeometryMountingCallback)"/>.</summary>
            <param name="geometryMountingCallback">Parameter geometryMountingCallback documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.GetGeometryMountingAsync(Tobii.Gaze.Core.GeometryMountingCallback)"/>.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.GetGeometryMounting">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.GetGeometryMounting"/>.</summary>
            <returns>Return value documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.GetGeometryMounting"/>.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.RegisterKeyProvider(Tobii.Gaze.Core.KeyProviderCallback)">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.RegisterKeyProvider(Tobii.Gaze.Core.KeyProviderCallback)"/>.</summary>
            <param name="keyProviderCallback">Parameter keyProvider documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.RegisterKeyProvider(Tobii.Gaze.Core.KeyProviderCallback)"/>.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.StartCalibrationAsync(Tobii.Gaze.Core.CompletionStatusCallback)">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.StartCalibrationAsync(Tobii.Gaze.Core.CompletionStatusCallback)"/>.</summary>
            <param name="completionStatusCallback">Parameter completionStatusCallback documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.StartCalibrationAsync(Tobii.Gaze.Core.CompletionStatusCallback)"/>.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.StopCalibrationAsync(Tobii.Gaze.Core.CompletionStatusCallback)">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.StopCalibrationAsync(Tobii.Gaze.Core.CompletionStatusCallback)"/>.</summary>
            <param name="completionStatusCallback">Parameter completionStatusCallback documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.StopCalibrationAsync(Tobii.Gaze.Core.CompletionStatusCallback)"/>.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.AddCalibrationPointAsync(Tobii.Gaze.Core.Point2D,Tobii.Gaze.Core.CompletionStatusCallback)">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.AddCalibrationPointAsync(Tobii.Gaze.Core.Point2D,Tobii.Gaze.Core.CompletionStatusCallback)"/>.</summary>
            <param name="point">Parameter point documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.AddCalibrationPointAsync(Tobii.Gaze.Core.Point2D,Tobii.Gaze.Core.CompletionStatusCallback)"/>.</param>
            <param name="completionStatusCallback">Parameter completionStatusCallback documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.AddCalibrationPointAsync(Tobii.Gaze.Core.Point2D,Tobii.Gaze.Core.CompletionStatusCallback)"/>.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.RemoveCalibrationPointAsync(Tobii.Gaze.Core.Point2D,Tobii.Gaze.Core.CompletionStatusCallback)">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.RemoveCalibrationPointAsync(Tobii.Gaze.Core.Point2D,Tobii.Gaze.Core.CompletionStatusCallback)"/>.</summary>
            <param name="point">Parameter point documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.RemoveCalibrationPointAsync(Tobii.Gaze.Core.Point2D,Tobii.Gaze.Core.CompletionStatusCallback)"/>.</param>
            <param name="completionStatusCallback">Parameter completionStatusCallback documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.RemoveCalibrationPointAsync(Tobii.Gaze.Core.Point2D,Tobii.Gaze.Core.CompletionStatusCallback)"/>.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.ComputeAndSetCalibrationAsync(Tobii.Gaze.Core.CompletionStatusCallback)">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.ComputeAndSetCalibrationAsync(Tobii.Gaze.Core.CompletionStatusCallback)"/>.</summary>
            <param name="completionStatusCallback">Parameter completionStatusCallback documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.ComputeAndSetCalibrationAsync(Tobii.Gaze.Core.CompletionStatusCallback)"/>.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.GetCalibrationAsync(Tobii.Gaze.Core.CalibrationCallback)">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.GetCalibrationAsync(Tobii.Gaze.Core.CalibrationCallback)"/>.</summary>
            <param name="calibrationCallback">Parameter calibrationCallback documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.GetCalibrationAsync(Tobii.Gaze.Core.CalibrationCallback)"/>.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.SetCalibrationAsync(Tobii.Gaze.Core.Calibration,Tobii.Gaze.Core.CompletionStatusCallback)">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.SetCalibrationAsync(Tobii.Gaze.Core.Calibration,Tobii.Gaze.Core.CompletionStatusCallback)"/>.</summary>
            <param name="calibration">Parameter calibration documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.SetCalibrationAsync(Tobii.Gaze.Core.Calibration,Tobii.Gaze.Core.CompletionStatusCallback)"/>.</param>
            <param name="completionStatusCallback">Parameter completionStatusCallback documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.SetCalibrationAsync(Tobii.Gaze.Core.Calibration,Tobii.Gaze.Core.CompletionStatusCallback)"/>.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.GetCalibration">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.GetCalibration"/>.</summary>
            <returns>Return value is documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.GetCalibration"/>.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.SetCalibration(Tobii.Gaze.Core.Calibration)">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.SetCalibration(Tobii.Gaze.Core.Calibration)"/>.</summary>
            <param name="calibration">Parameter calibration documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.SetCalibration(Tobii.Gaze.Core.Calibration)"/>.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.GetDisplayAreaAsync(Tobii.Gaze.Core.DisplayAreaCallback)">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.GetDisplayAreaAsync(Tobii.Gaze.Core.DisplayAreaCallback)"/>.</summary>
            <param name="displayAreaCallback">Parameter displayAreaCallback documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.GetDisplayAreaAsync(Tobii.Gaze.Core.DisplayAreaCallback)"/></param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.SetDisplayAreaAsync(Tobii.Gaze.Core.DisplayArea,Tobii.Gaze.Core.CompletionStatusCallback)">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.SetDisplayAreaAsync(Tobii.Gaze.Core.DisplayArea,Tobii.Gaze.Core.CompletionStatusCallback)"/>.</summary>
            <param name="displayArea">Parameter displayArea documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.SetDisplayAreaAsync(Tobii.Gaze.Core.DisplayArea,Tobii.Gaze.Core.CompletionStatusCallback)"/>.</param>
            <param name="completionStatusCallback">Parameter completionStatusCallback documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.SetDisplayAreaAsync(Tobii.Gaze.Core.DisplayArea,Tobii.Gaze.Core.CompletionStatusCallback)"/>.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.GetDisplayArea">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.GetDisplayArea"/>.</summary>
            <returns>Return value documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.GetDisplayArea"/>.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.SetDisplayArea(Tobii.Gaze.Core.DisplayArea)">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.SetDisplayArea(Tobii.Gaze.Core.DisplayArea)"/>.</summary>
            <param name="displayArea">Parameter displayArea documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.SetDisplayArea(Tobii.Gaze.Core.DisplayArea)"/>.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.SendCustomCommand(System.Byte[],System.Byte[])">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.SendCustomCommand(System.Byte[],System.Byte[])"/>.</summary>
            <param name="inData">Parameter inData documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.SendCustomCommand(System.Byte[],System.Byte[])"/>.</param>
            <param name="outData">Parameter outData documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.SendCustomCommand(System.Byte[],System.Byte[])"/>.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.SendCustomCommandAsync(System.Byte[],Tobii.Gaze.Core.CustomCommandCallback)">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.SendCustomCommandAsync(System.Byte[],Tobii.Gaze.Core.CustomCommandCallback)"/>.</summary>
            <param name="inData">Parameter inData documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.SendCustomCommandAsync(System.Byte[],Tobii.Gaze.Core.CustomCommandCallback)"/>.</param>
            <param name="customCommandCallback">Parameter outData documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.SendCustomCommandAsync(System.Byte[],Tobii.Gaze.Core.CustomCommandCallback)"/>.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTracker.SetOption(Tobii.Gaze.Core.EyeTrackerOption,System.Byte[])">
            <summary>See <see cref="M:Tobii.Gaze.Core.IEyeTracker.SetOption(Tobii.Gaze.Core.EyeTrackerOption,System.Byte[])"/>.</summary>
            <param name="opt">Parameter inData documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.SetOption(Tobii.Gaze.Core.EyeTrackerOption,System.Byte[])"/>.</param>
            <param name="value">Parameter outData documented in <see cref="M:Tobii.Gaze.Core.IEyeTracker.SetOption(Tobii.Gaze.Core.EyeTrackerOption,System.Byte[])"/>.</param>
        </member>
        <member name="E:Tobii.Gaze.Core.EyeTracker.GazeData">
            <summary>See <see cref="E:Tobii.Gaze.Core.IEyeTracker.GazeData"/>.</summary>
        </member>
        <member name="E:Tobii.Gaze.Core.EyeTracker.EyeTrackerError">
            <summary>See <see cref="E:Tobii.Gaze.Core.IEyeTracker.EyeTrackerError"/>.</summary>
        </member>
        <member name="P:Tobii.Gaze.Core.EyeTracker.Uri">
            <summary>
            Gets the URI of the eye tracker. See <see cref="P:Tobii.Gaze.Core.IEyeTracker.Uri"/>.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.EyeTracker.Connected">
            <summary>
            Gets a value indicating whether the eye tracker is connected or not. See <see cref="P:Tobii.Gaze.Core.IEyeTracker.Connected"/>.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.EyeTracker.Handle">
            <summary>
            Gets the handle to the eye tracker instance
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.IExtendedEyeTracker">
            <summary>
            Extends the IEyeTracker interface with not-so-common operations.
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.ExtendedEyeTracker.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.Internal.ExtendedEyeTracker"/> class. This class
            should not be used by API clients!
            Throws EyeTrackerException if creation fails.
            </summary>
            <param name="uri">A Uri identifying the eye tracker.</param>
        </member>
        <member name="T:Tobii.Gaze.Core.EyeTrackerCoreLibrary">
            <summary>
            Wraps the EyeTracker core library.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.TobiiLibrary">
            <summary>
            Base class for library wrappers.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.ITobiiLibrary">
            <summary>
            Interface to wrap library meta functions.
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.ITobiiLibrary.LibraryVersion">
            <summary>
            Gets the version of the native DLL.
            </summary>
            <returns>The version number of the native DLL.</returns>
            <remarks>This is a global function and does not depend on the connected eye tracker.</remarks>
        </member>
        <member name="M:Tobii.Gaze.Core.ITobiiLibrary.SetLogging(System.String,Tobii.Gaze.Core.LogLevel)">
            <summary>
            Sets the logging level in the native API.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="logLevel">The log level.</param>
            <remarks>This is a global function and does not depend on the connected eye tracker.</remarks>
        </member>
        <member name="M:Tobii.Gaze.Core.TobiiLibrary.LibraryVersion">
            <summary>
            Gets the version of the native DLL.
            </summary>
            <returns>
            The version number of the native DLL.
            </returns>
        </member>
        <member name="M:Tobii.Gaze.Core.TobiiLibrary.SetLogging(System.String,Tobii.Gaze.Core.LogLevel)">
            <summary>
            Sets the logging level in the native API.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="logLevel">The log level.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.TobiiLibrary.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.TobiiLibrary.ThrowOnError(Tobii.Gaze.Core.ErrorCode)">
            <summary>
            Throws an exception if the error code is not 0.
            </summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.TobiiLibrary.DoSetLogging(System.String,Tobii.Gaze.Core.LogLevel)">
            <summary>
            Sets the logging in the native library.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="logLevel">The log level.</param>
            <returns>The error code from the native library.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.TobiiLibrary.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Tobii.Gaze.Core.IEyeTrackerCoreLibrary">
            <summary>
            Interface to wrap meta functions of the Tobii eye tracker core library.
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTrackerCoreLibrary.GetConnectedEyeTracker">
            <summary>
            Returns the Uri of a connected eye tracker.
            </summary>        
            <returns>
            The Uri of the eye tracker, or null if no eye tracker is connected
            </returns>
        </member>
        <member name="M:Tobii.Gaze.Core.IEyeTrackerCoreLibrary.ListUsbEyeTrackers">
            <summary>
            Lists all connected USB trackers.
            </summary>        
            <returns>
            A list of the USB trackers device info.
            </returns>        
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTrackerCoreLibrary.LibraryVersion">
            <summary>
            Gets the version of the native DLL.
            </summary>
            <returns>
            The version number of the native DLL.
            </returns>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTrackerCoreLibrary.ListUsbEyeTrackers">
            <summary>
            Lists all connected USB trackers.
            </summary>        
            <returns>
            A list of the USB trackers device info.
            </returns>        
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTrackerCoreLibrary.GetConnectedEyeTracker">
            <summary>
            Returns the Uri of a connected eye tracker.
            </summary>        
            <returns>
            The Uri of the eye tracker, or null if no eye tracker is connected
            </returns>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTrackerCoreLibrary.DoSetLogging(System.String,Tobii.Gaze.Core.LogLevel)">
            <summary>
            Sets the logging in the native library.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="logLevel">The log level.</param>
            <returns>
            The error code from the native library.
            </returns>
        </member>
        <member name="T:Tobii.Gaze.Core.GazeData">
            <summary> 
            This class holds gaze data received from the eye tracker. 
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.GazeData.#ctor(System.Int64,Tobii.Gaze.Core.TrackingStatus,Tobii.Gaze.Core.GazeDataEye,Tobii.Gaze.Core.GazeDataEye)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.GazeData"/> struct.
            </summary>
            <param name="timestamp">The time stamp.</param>
            <param name="trackingStatus">The tracking status.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.GazeData.#ctor(Tobii.Gaze.Core.Internal.DataTypes.InternalGazeData)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.GazeData"/> struct.
            </summary>
            <param name="internalGazeData">The internalGazeData.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.GazeData.op_Equality(Tobii.Gaze.Core.GazeData,Tobii.Gaze.Core.GazeData)">
            <summary>
            Determines if GazeData d1 is equal to GazeData d2.
            </summary>
            <param name="gazeData1">First instance in comparison.</param>
            <param name="gazeData2">Second instance in comparison.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.GazeData.op_Inequality(Tobii.Gaze.Core.GazeData,Tobii.Gaze.Core.GazeData)">
            <summary>
            Determines if GazeData 1 is not equal to GazeData 2.
            </summary>
            <param name="gazeData1">First instance in comparison.</param>
            <param name="gazeData2">Second instance in comparison.</param>
            <returns>Returns true if instances are not equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.GazeData.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Other object instance.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.GazeData.Equals(Tobii.Gaze.Core.GazeData)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="other">Other GazeData instance.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.GazeData.GetHashCode">
            <summary>
            Returns the hash code of the instance.
            </summary>
            <returns>The hash code of the instance.</returns>
        </member>
        <member name="P:Tobii.Gaze.Core.GazeData.Timestamp">
            <summary>Gets the timestamp for the gaze data</summary>
        </member>
        <member name="P:Tobii.Gaze.Core.GazeData.TrackingStatus">
            <summary>Gets the combined tracking status for both eyes. </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.GazeData.Left">
            <summary>Gets gaze data for the left eye</summary>
        </member>
        <member name="P:Tobii.Gaze.Core.GazeData.Right">
            <summary>Gets gaze data for the right eye</summary>
        </member>
        <member name="T:Tobii.Gaze.Core.GazeDataExtension">
            <summary> 
            This class holds gaze data received from the eye tracker. 
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.GazeDataExtension.#ctor(Tobii.Gaze.Core.Internal.DataTypes.InternalGazeDataExtension)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.GazeDataExtension"/> struct.
            </summary>
            <param name="internalGazeDataExtension">The internalGazeDataExtension.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.GazeDataExtension.op_Equality(Tobii.Gaze.Core.GazeDataExtension,Tobii.Gaze.Core.GazeDataExtension)">
            <summary>
            Determines if GazeDataExtension d1 is equal to GazeDataExtension d2.
            </summary>
            <param name="gazeDataExtension1">First instance in comparison.</param>
            <param name="gazeDataExtension2">Second instance in comparison.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.GazeDataExtension.op_Inequality(Tobii.Gaze.Core.GazeDataExtension,Tobii.Gaze.Core.GazeDataExtension)">
            <summary>
            Determines if GazeDataExtension 1 is not equal to GazeDataExtension 2.
            </summary>
            <param name="gazeDataExtension1">First instance in comparison.</param>
            <param name="gazeDataExtension2">Second instance in comparison.</param>
            <returns>Returns true if instances are not equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.GazeDataExtension.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Other object instance.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.GazeDataExtension.Equals(Tobii.Gaze.Core.GazeDataExtension)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="other">Other GazeDataExtension instance.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.GazeDataExtension.GetHashCode">
            <summary>
            Returns the hash code of the instance.
            </summary>
            <returns>The hash code of the instance.</returns>
        </member>
        <member name="P:Tobii.Gaze.Core.GazeDataExtension.ColumnId">
            <summary>Gets the column Id that identifies the extension data</summary>
        </member>
        <member name="P:Tobii.Gaze.Core.GazeDataExtension.Data">
            <summary>Gets the extension raw data</summary>
        </member>
        <member name="T:Tobii.Gaze.Core.GazeDataEye">
            <summary>
            This class holds gaze data for one eye.
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.GazeDataEye.#ctor(Tobii.Gaze.Core.Point3D,Tobii.Gaze.Core.Point3D,Tobii.Gaze.Core.Point3D,Tobii.Gaze.Core.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.GazeDataEye"/> struct.
            </summary>
            <param name="eyePositionFromEyeTrackerMM">The eye position from eye tracker in millimeter.</param>
            <param name="eyePositionInTrackBoxNormalized">The eye position in track box normalized.</param>
            <param name="gazePointFromEyeTrackerMM">The gaze point from eye tracker in millimeter.</param>
            <param name="gazePointOnDisplayNormalized">The gaze point on display normalized.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.GazeDataEye.#ctor(Tobii.Gaze.Core.Internal.DataTypes.InternalGazeDataEye)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.GazeDataEye"/> struct.
            </summary>
            <param name="g">The g.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.GazeDataEye.op_Equality(Tobii.Gaze.Core.GazeDataEye,Tobii.Gaze.Core.GazeDataEye)">
            <summary>
            Determines if GazeDataEye d1 is equal to GazeDataEye d2.
            </summary>
            <param name="gazeDataEye1">First instance in comparison.</param>
            <param name="gazeDataEye2">Second instance in comparison.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.GazeDataEye.op_Inequality(Tobii.Gaze.Core.GazeDataEye,Tobii.Gaze.Core.GazeDataEye)">
            <summary>
            Determines if GazeDataEye d1 is not equal to GazeDataEye d2.
            </summary>
            <param name="gazeDataEye1">First instance in comparison.</param>
            <param name="gazeDataEye2">Second instance in comparison.</param>
            <returns>Returns true if instances are not equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.GazeDataEye.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Other object instance.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.GazeDataEye.Equals(Tobii.Gaze.Core.GazeDataEye)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="other">Other GazeDataEye instance.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.GazeDataEye.GetHashCode">
            <summary>
            Returns the hash code of the instance.
            </summary>
            <returns>The hash code of the instance.</returns>
        </member>
        <member name="P:Tobii.Gaze.Core.GazeDataEye.EyePositionFromEyeTrackerMM">
            <summary>
            Gets the eye position from eye tracker MM.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.GazeDataEye.EyePositionInTrackBoxNormalized">
            <summary>
            Gets the eye position in track box normalized.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.GazeDataEye.GazePointFromEyeTrackerMM">
            <summary>
            Gets the gaze point from eye tracker MM.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.GazeDataEye.GazePointOnDisplayNormalized">
            <summary>
            Gets the gaze point on display normalized.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.GeometryMounting">
            <summary>
            Describes the geometry of an eye tracker mounting.
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.GeometryMounting.#ctor(System.Int32,System.Single,System.Single,Tobii.Gaze.Core.Point3D,Tobii.Gaze.Core.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.GeometryMounting"/> struct.
            </summary>
            <param name="guides">Number of guides</param>
            <param name="width">Width of the eye tracker, or the width between the guides, if they exist</param>
            <param name="angle">Mounting angle</param>
            <param name="externalOffset">External offset vector of the tracker</param>
            <param name="internalOffset">Internal offset vector of the tracker</param>
        </member>
        <member name="M:Tobii.Gaze.Core.GeometryMounting.#ctor(Tobii.Gaze.Core.Internal.DataTypes.InternalGeometryMounting)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.GeometryMounting"/> struct.
            </summary>
            <param name="mounting">The mounting.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.GeometryMounting.op_Equality(Tobii.Gaze.Core.GeometryMounting,Tobii.Gaze.Core.GeometryMounting)">
            <summary>
            Determines if GeometryMounting geometryMounting1 is equal to GeometryMounting geometryMounting2.
            </summary>
            <param name="geometryMounting1">First instance in comparison.</param>
            <param name="geometryMounting2">Second instance in comparison.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.GeometryMounting.op_Inequality(Tobii.Gaze.Core.GeometryMounting,Tobii.Gaze.Core.GeometryMounting)">
            <summary>
            Determines if geometryMounting1 is not equal to geometryMounting2.
            </summary>
            <param name="geometryMounting1">First instance in comparison.</param>
            <param name="geometryMounting2">Second instance in comparison.</param>
            <returns>Returns true if instances are not equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.GeometryMounting.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Other object instance.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.GeometryMounting.Equals(Tobii.Gaze.Core.GeometryMounting)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="other">Other GeometryMounting instance.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.GeometryMounting.GetHashCode">
            <summary>
            Returns the hash code of the instance.
            </summary>
            <returns>The hash code of the instance.</returns>
        </member>
        <member name="P:Tobii.Gaze.Core.GeometryMounting.Guides">
            <summary>
            Gets the number of guides on the tracker.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.GeometryMounting.Width">
            <summary>
            Gets the width of the eye tracker, or the width between the guides, if they exist.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.GeometryMounting.Angle">
            <summary>
            Gets the mounting angle.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.GeometryMounting.ExternalOffset">
            <summary>
            Gets external offset vector of the tracker.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.GeometryMounting.InternalOffset">
            <summary>
            Gets internal offset vector of the tracker.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.AsyncBasicCallbackWrapper">
            <summary>
            Callback wrapper.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.CallbackWrapperBase">
            <summary>
            Callback wrapper.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.AsyncCalibrationCallbackWrapper">
            <summary>
            Callback wrapper.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.AsyncCallbackWrapper">
            <summary>
            Callback wrapper.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.AsyncCustomCommandCallbackWrapper">
            <summary>
            Callback wrapper.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.AsyncDeviceInfoCallbackWrapper">
            <summary>
            Callback wrapper.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.AsyncDisplayAreaCallbackWrapper">
            <summary>
            Callback wrapper.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.AsyncGeometryMountingCallbackWrapper">
            <summary>
            Callback wrapper.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.AsyncSetCalibrationCallbackWrapper">
            <summary>
            Callback wrapper.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.AsyncSetDisplayAreaCallbackWrapper">
            <summary>
            Callback wrapper.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.AsyncTrackBoxCallbackWrapper">
            <summary>
            Callback wrapper.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.ErrorMessage">
            <summary>
            Maps error codes to error messages.
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.ErrorMessage.GetErrorMessage(Tobii.Gaze.Core.ErrorCode)">
            <summary>
            Get the meaning of an error code.
            </summary>
            <param name="errorCode">The error code.</param>
            <returns>The text message for the error code.</returns>
        </member>
        <member name="T:Tobii.Gaze.Core.GazeDataEventArgs">
            <summary>
            Class representing the arguments for a GazeDataEvent.
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.GazeDataEventArgs.#ctor(Tobii.Gaze.Core.GazeData,System.Collections.Generic.IEnumerable{Tobii.Gaze.Core.GazeDataExtension})">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.GazeDataEventArgs"/> class.
            </summary>
            <param name="gazeData">The gaze data.</param>
            <param name="gazeDataExtensions">The gaze data extensions.</param>
        </member>
        <member name="P:Tobii.Gaze.Core.GazeDataEventArgs.GazeData">
            <summary>
            Gets the gaze data.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.GazeDataEventArgs.GazeDataExtensions">
            <summary>
            Gets the gaze data extensions.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.EyeTrackerErrorEventArgs">
            <summary>
            Class representing the arguments for an EyeTrackerError event.
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTrackerErrorEventArgs.#ctor(Tobii.Gaze.Core.ErrorCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.EyeTrackerErrorEventArgs"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Tobii.Gaze.Core.EyeTrackerErrorEventArgs.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.EyeTrackerErrorEventArgs.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.EyeTrackerException">
            <summary>
            Exception thrown to indicate something wrong with eye tracking.
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTrackerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.EyeTrackerException"/> class.
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTrackerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.EyeTrackerException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTrackerException.#ctor(Tobii.Gaze.Core.ErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.EyeTrackerException"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTrackerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.EyeTrackerException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTrackerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.EyeTrackerException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:Tobii.Gaze.Core.EyeTrackerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic). </exception>
            <PermissionSet>
            <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Tobii.Gaze.Core.EyeTrackerException.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.DataTypes">
            <summary>
            Internal data types.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.DataTypes.InternalPoint2D">
            <summary>
            This struct holds a two dimensional point.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.DataTypes.InternalPoint2DFloat">
            <summary>
            This struct holds a two dimensional point.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.DataTypes.InternalPoint3D">
            <summary>
            This struct holds a three dimensional point.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.DataTypes.InternalRect">
            <summary> 
            This struct holds a rectangle. 
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.Internal.DataTypes.InternalRect.Left">
            <summary>Specifies the x-coordinate of the upper-left corner of a rectangle.</summary>
        </member>
        <member name="F:Tobii.Gaze.Core.Internal.DataTypes.InternalRect.Top">
            <summary> Specifies the y-coordinate of the upper-left corner of a rectangle.</summary>
        </member>
        <member name="F:Tobii.Gaze.Core.Internal.DataTypes.InternalRect.Right">
            <summary>  Specifies the x-coordinate of the lower-right corner of a rectangle.</summary>
        </member>
        <member name="F:Tobii.Gaze.Core.Internal.DataTypes.InternalRect.Bottom">
            <summary> Specifies the y-coordinate of the lower-right corner of a rectangle.</summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.DataTypes.InternalGazeDataEye">
            <summary> 
            This struct holds gaze data eye. 
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.DataTypes.InternalGazeData">
            <summary> 
            This struct holds gaze data. 
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.DataTypes.InternalGazeDataExtension">
            <summary> 
            This struct holds a specific gaze extension data. 
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.DataTypes.InternalGazeDataExtensions">
            <summary> 
            This struct holds a collection of gaze extension data.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.DataTypes.InternalTrackBox">
            <summary>
            This struct holds a track box
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.DataTypes.InternalGeometryMounting">
            <summary>
            This struct holds a mounting geometry        
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.DataTypes.InternalDisplayArea">
            <summary>
            This struct holds a display area
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.DataTypes.InternalCalibrationPointData">
            <summary>
            This struct holds calibration data
            </summary>        
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.DataTypes.InternalCustomCommand">
            <summary>
            Holds data for a custom command
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.DataTypes.Constants">
            <summary>
            Constants related to data types.
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.DataTypes.InternalCalibration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.Internal.DataTypes.InternalCalibration"/> class.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.TobiiConverter">
            <summary>
            Extension methods for converting between public and internal data types
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.TobiiConverter.ToPoint2D(Tobii.Gaze.Core.Point2D)">
            <summary>
            Toes the point2 D.
            </summary>
            <param name="p">The p.</param>
            <returns>An internal struct.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.TobiiConverter.ToPoint(Tobii.Gaze.Core.Internal.DataTypes.InternalPoint2DFloat)">
            <summary>
            Converts an internal struct to a public class.
            </summary>
            <param name="p">The instance being extended.</param>
            <returns>A Point2D instance.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.TobiiConverter.ToPoint(Tobii.Gaze.Core.Internal.DataTypes.InternalPoint2D)">
            <summary>
            Converts an internal struct to a public class.
            </summary>
            <param name="p">The instance being extended.</param>
            <returns>A Point2D instance.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.TobiiConverter.ToGazePoint3D(Tobii.Gaze.Core.Point3D)">
            <summary>
            Converts an public class to an internal struct.
            </summary>
            <param name="p">The instance being extended.</param>
            <returns>An InternalPoint3D instance.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.TobiiConverter.ToPoint3D(Tobii.Gaze.Core.Internal.DataTypes.InternalPoint3D)">
            <summary>
            Converts an internal struct to a public class.
            </summary>
            <param name="p">The instance being extended.</param>
            <returns>A Point3D instance.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.TobiiConverter.ToDeviceInfo(Tobii.Gaze.Core.Internal.DataTypes.InternalDeviceInfo)">
            <summary>
            Converts an internal struct to a public class.
            </summary>
            <param name="d">The instance being extended.</param>
            <returns>A DeviceInfo instance.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.TobiiConverter.ToTrackBox(Tobii.Gaze.Core.Internal.DataTypes.InternalTrackBox)">
            <summary>
            Converts an internal struct to a public class.
            </summary>
            <param name="t">The instance being extended.</param>
            <returns>A TrackBox instance.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.TobiiConverter.ToGeometryMounting(Tobii.Gaze.Core.Internal.DataTypes.InternalGeometryMounting)">
            <summary>
            Converts an internal struct to a public class.
            </summary>
            <param name="m">The instance being extended.</param>
            <returns>A GeometryMounting instance.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.TobiiConverter.ToDisplayArea(Tobii.Gaze.Core.Internal.DataTypes.InternalDisplayArea)">
            <summary>
            Converts an internal struct to a public class.
            </summary>
            <param name="d">The instance being extended.</param>
            <returns>A DisplayArea instance.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.TobiiConverter.ToDisplayAreaInternal(Tobii.Gaze.Core.DisplayArea)">
            <summary>
            Converts an public class to an internal struct.
            </summary>
            <param name="d">The instance being extended.</param>
            <returns>An InternalDisplayArea instance.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.TobiiConverter.ToGazeData(Tobii.Gaze.Core.Internal.DataTypes.InternalGazeData)">
            <summary>
            Converts an internal struct to a public class.
            </summary>
            <param name="g">The instance being extended.</param>
            <returns>A GazeData instance.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.TobiiConverter.ToGazeDataExtensions(Tobii.Gaze.Core.Internal.DataTypes.InternalGazeDataExtensions)">
            <summary>
            Converts an internal struct to a public class.
            </summary>
            <param name="g">The instance being extended.</param>
            <returns>A GazeDataExtensions instance.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.TobiiConverter.ToGazeDataExtension(Tobii.Gaze.Core.Internal.DataTypes.InternalGazeDataExtension)">
            <summary>
            Converts an internal struct to a public class.
            </summary>
            <param name="g">The instance being extended.</param>
            <returns>A GazeDataExtension instance.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.TobiiConverter.ToCalibrationPlotItem(Tobii.Gaze.Core.Internal.DataTypes.InternalCalibrationPointData)">
            <summary>
            Converts an internal struct to a public class.
            </summary>
            <param name="p">The instance being extended.</param>
            <returns>A CalibrationPlotItem instance.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.TobiiConverter.ToGazeDataEye(Tobii.Gaze.Core.Internal.DataTypes.InternalGazeDataEye)">
            <summary>
            Converts an internal struct to a public class.
            </summary>
            <param name="g">The instance being extended.</param>
            <returns>A GazeDataEye instance.</returns>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.NativeMethods">
            <summary>
            Native methods 
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.EyeTrackerOption">
            <summary>
            Enum containing settable API options
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.EyeTrackerOption.Timeout">
            <summary>
            The timeout for synchronous calls
            </summary> 
        </member>
        <member name="T:Tobii.Gaze.Core.Point2D">
            <summary>
            Structure representing a two dimensional point.
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.Point2D.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Point2D struct.
            </summary>
            <param name="x">The x value of the point.</param>
            <param name="y">The y value of the point.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.Point2D.op_Equality(Tobii.Gaze.Core.Point2D,Tobii.Gaze.Core.Point2D)">
            <summary>
            Determines if Point2D point1 is equal to Point2D point2.
            </summary>
            <param name="point1">First instance in comparison.</param>
            <param name="point2">Second instance in comparison.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Point2D.op_Inequality(Tobii.Gaze.Core.Point2D,Tobii.Gaze.Core.Point2D)">
            <summary>
            Determines if Point2D point1 is not equal to Point2D point2.
            </summary>
            <param name="point1">First instance in comparison.</param>
            <param name="point2">Second instance in comparison.</param>
            <returns>Returns true if instances are not equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Point2D.Equals(Tobii.Gaze.Core.Point2D)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="other">Other Point2D instance.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Point2D.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Other Point2D instance.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Point2D.GetHashCode">
            <summary>
            Returns the hash code for this instance. 
            </summary>
            <returns>The hash code of the instance.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Point2D.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>A string representation of the instance.</returns>
        </member>
        <member name="P:Tobii.Gaze.Core.Point2D.X">
            <summary>
            Gets the x location of the point.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.Point2D.Y">
            <summary>
            Gets the y location of the point.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Point3D">
            <summary>
            Structure representing a three dimensional point.
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.Point3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Point3D struct.
            </summary>
            <param name="x">The x value of the point.</param>
            <param name="y">The y value of the point.</param>
            <param name="z">The z value of the point.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.Point3D.op_Equality(Tobii.Gaze.Core.Point3D,Tobii.Gaze.Core.Point3D)">
            <summary>
            Determines if Point3D point1 is equal to Point3D point2.
            </summary>
            <param name="point1">First instance in comparison.</param>
            <param name="point2">Second instance in comparison.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Point3D.op_Inequality(Tobii.Gaze.Core.Point3D,Tobii.Gaze.Core.Point3D)">
            <summary>
            Determines if Point3D point1 is not equal to Point3D point2.
            </summary>
            <param name="point1">First instance in comparison.</param>
            <param name="point2">Second instance in comparison.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Point3D.Equals(Tobii.Gaze.Core.Point3D)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="other">Other Point3D instance.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Point3D.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Other Point3D instance.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Point3D.GetHashCode">
            <summary>
            Returns the hash code of the instance.
            </summary>
            <returns>The hash code of the instance.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Point3D.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>A string representation of the instance.</returns>
        </member>
        <member name="P:Tobii.Gaze.Core.Point3D.X">
            <summary>
            Gets the x location of the point.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.Point3D.Y">
            <summary>
            Gets the y location of the point. 
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.Point3D.Z">
            <summary>
            Gets the z location of the point.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Rect">
            <summary>
            Structure representing a rectangle.
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.Rect"/> struct.
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.Rect.op_Equality(Tobii.Gaze.Core.Rect,Tobii.Gaze.Core.Rect)">
            <summary>
            Determines whether two rectangles are equal.
            </summary>
            <param name="first">First rectangle.</param>
            <param name="second">Second rectangle.</param>
            <returns>A value indicating whether the two rectangles are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Rect.op_Inequality(Tobii.Gaze.Core.Rect,Tobii.Gaze.Core.Rect)">
            <summary>
            Determines whether two rectangles are different.
            </summary>
            <param name="first">First rectangle.</param>
            <param name="second">Second rectangle.</param>
            <returns>A value indicating whether the two rectangles are different.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Rect.Equals(Tobii.Gaze.Core.Rect)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="other">Object with which to compare.</param>
            <returns>A value indicating whether the objects are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Rect.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Object with which to compare.</param>
            <returns>A value indicating whether object is equal to the current instance.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Rect.GetHashCode">
            <summary>
            Returns the hash code for this instance. 
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Rect.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="P:Tobii.Gaze.Core.Rect.X">
            <summary>
            Gets the x position.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.Rect.Y">
            <summary>
            Gets the y position.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.Rect.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.Rect.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.Rect.Bottom">
            <summary>
            Gets the y position of the bottom.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.Rect.Right">
            <summary>
            Gets the x position of the right side.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.CompletionCallback">
            <summary>
            This type is used for callback functions that are registered with several asynchronous commands that do not have any return data or an error code.
            The callback function will be called when the command is completed.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.CompletionStatusCallback">
            <summary>
            This type is used for callback functions that are registered with several asynchronous commands that do not have any return data.
            The callback function will be called when the command is completed.
            </summary>
            <param name="errorCode">Will be set to ErrorCode.Success if operation was successful, otherwise to an error code.</param>
        </member>
        <member name="T:Tobii.Gaze.Core.DeviceInfoCallback">
            <summary>
            This type is used for the callback function that is registered with EyeTracker.GetDeviceInfoAsync. 
            The callback function will be called when the command is completed.
            </summary>
            <param name="deviceInfo">The retrieved device info.</param>
            <param name="errorCode">Will be set to ErrorCodes.Success if operation was successful, otherwise to an error code.</param>
        </member>
        <member name="T:Tobii.Gaze.Core.TrackBoxCallback">
            <summary>
            This type is used for the callback function that is registered with EyeTracker.GetTrackBoxAsync. 
            The callback function will be called when the command is completed.
            </summary>
            <param name="trackBox">The retrieved Track Box.</param>
            <param name="errorCode">Will be set to ErrorCodes.Success if operation was successful, otherwise to an error code.</param>
        </member>
        <member name="T:Tobii.Gaze.Core.GeometryMountingCallback">
            <summary>
            This type is used for the callback function that is registered with EyeTracker.GetGeometryMountingAsync. 
            The callback function will be called when the command is completed.
            </summary>
            <param name="geometryMounting">The retrieved mounting geometry.</param>
            <param name="errorCode">Will be set to ErrorCodes.Success if operation was successful, otherwise to an error code.</param>
        </member>
        <member name="T:Tobii.Gaze.Core.KeyProviderCallback">
            <summary>
            This type is used for the callback function that is registered with EyeTracker.RegisterKeyProvider. 
            The callback function will be called when an eye tracker is to be unlocked.
            </summary>
            <param name="realmId">The realm of the eye tracker to provide the key for.</param>
            <returns>The key to use for unlocking the eye tracker.</returns>
        </member>
        <member name="T:Tobii.Gaze.Core.GetTimeCallback">
            <summary>
            Used to supply the time to gaze core for time sync purposes.
            </summary>
            <returns>Time in microseconds</returns>
        </member>
        <member name="T:Tobii.Gaze.Core.CalibrationCallback">
            <summary>
            This type is used for the callback function that is registered with EyeTracker.GetCalibrationAsync. 
            The callback function will be called when the command is completed
            </summary>
            <param name="calibration">The retrieved Calibration.</param>
            <param name="errorCode">Will be set to ErrorCodes.Success if operation was successful, otherwise to an error code.</param>
        </member>
        <member name="T:Tobii.Gaze.Core.DisplayAreaCallback">
            <summary>
            This type is used for the callback function that is registered with EyeTracker.GetDisplayAreaAsync. 
            The callback function will be called when the command is completed.
            </summary>
            <param name="displayArea">The retrieved Display Area.</param>
            <param name="errorCode">Will be set to ErrorCodes.Success if operation was successful, otherwise to an error code.</param>
        </member>
        <member name="T:Tobii.Gaze.Core.SettingsChangedCallback">
            <summary>
            This type is used for the callback function that is registered with ConfigurationProvider.RegisterSettingsChangeListener.
            The callback function will be called whenever a setting is changed.
            </summary>
            <param name="settingsType">The type of setting that has changed.</param>
            <param name="errorCode">Will be set to ErrorCodes.Success if operation was successful, otherwise to an error code.</param>
        </member>
        <member name="T:Tobii.Gaze.Core.LogLevel">
            <summary>
            This enum hold the different log levels.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.LogLevel.Off">
            <summary>
            No logging.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.LogLevel.Debug">
            <summary>
            Debug logging. This is the most verbose level. Logs all messages.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.LogLevel.Info">
            <summary>
            Log only information level messages (and above).
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.LogLevel.Warning">
            <summary>
            Log only warning level messages (and above).
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.LogLevel.Error">
            <summary>
            Log only error level messages.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.TrackingStatus">
            <summary>
            This enum hold the possible gaze tracking statuses.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.TrackingStatus.NoEyesTracked">
            <summary>
            No eyes were detected.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.TrackingStatus.BothEyesTracked">
            <summary>
            Both eyes tracked.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.TrackingStatus.OnlyLeftEyeTracked">
            <summary>
            Only left eye tracked.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.TrackingStatus.OneEyeTrackedProbablyLeft">
            <summary>
            Only one eye tracked, probably the left.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.TrackingStatus.OneEyeTrackedUnknownWhich">
            <summary>
            Only one eye tracked, not sure which.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.TrackingStatus.OneEyeTrackedProbablyRight">
            <summary>
            Only one eye tracked, probably the right.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.TrackingStatus.OnlyRightEyeTracked">
            <summary>
            Only right eye tracked.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.CalibrationPointStatus">
            <summary> 
            This enum hold the possible calibration point statuses.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.CalibrationPointStatus.CalibrationPointFailedOrInvalid">
            <summary>
            Calibration point has failed or is invalid.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.CalibrationPointStatus.CalibrationPointValidButNotUsedInCalibration">
            <summary>
            Calibration point is valid but not used in calibration.
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.CalibrationPointStatus.CalibrationPointValidAndUsedInCalibration">
            <summary>
            Calibration point is valid and used in calibration.
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.SettingsType">
            <summary>
            This enum hold the possible settings type for settings changed callbacks
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.SettingsType.InvalidOrUnknownSettingsType">
            <summary>
            Invalid or unknown settings type
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.SettingsType.EyeTrackingConfiguration">
            <summary>
            Eye tracking configuration as configured in Eye Tracking Control Panel
            </summary>
        </member>
        <member name="F:Tobii.Gaze.Core.SettingsType.OSDisplaySettings">
            <summary>
            Display monitor settings in the operating system, such as PPI/DPI and resolution
            </summary>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.MarshalingHelper">
            <summary>
            Helper functions when marshaling between managed and unmanaged code.
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.MarshalingHelper.GetCalibrationData(System.IntPtr)">
            <summary>
            Gets the calibration data as a managed object.
            </summary>
            <param name="calibrationBlobPtr">The calibration blob pointer.</param>
            <returns>The blob data as a byte array.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.MarshalingHelper.GetCalibrationBlobPtr(System.Byte[])">
            <summary>
            Gets the calibration blob pointer.
            </summary>
            <param name="data">The data.</param>
            <returns>A pointer to a native object.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.MarshalingHelper.GetZeroTerminatedLength(System.Byte[])">
            <summary>
            Gets the length of the zero terminated string in the buffer.
            </summary>
            <param name="buffer">The buffer as a byte array.</param>
            <returns>The length of the string or the size of the buffer if the string doesn't terminate.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.MarshalingHelper.GetZeroTerminatedLength(System.IntPtr)">
            <summary>
            Gets the length of the zero terminated string.
            </summary>
            <param name="buffer">A pointer to the buffer.</param>
            <returns>The length of the string in the buffer.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.MarshalingHelper.GetZeroTerminatedUtf8String(System.Byte[])">
            <summary>
            Gets the zero terminated UTF8 string.
            </summary>
            <param name="buffer">The buffer as a byte array.</param>
            <returns>A .net string.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.MarshalingHelper.GetZeroTerminatedUtf8String(System.IntPtr)">
            <summary>
            Gets the zero terminated UTF8 string.
            </summary>
            <param name="buffer">A pointer to the buffer.</param>
            <returns>A .net string object.</returns>
        </member>
        <member name="T:Tobii.Gaze.Core.Internal.Utf8Marshaler">
            <summary>
            Custom marshaler for UTF-8 strings.
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.Utf8Marshaler.GetInstance(System.String)">
            <summary>
            Singleton method.
            </summary>
            <param name="cookie">The cookie.</param>
            <returns>The singleton instance.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.Utf8Marshaler.MarshalManagedToNative(System.Object)">
            <summary>
            Marshals the managed to native.
            </summary>
            <param name="managedObj">The managed object.</param>
            <returns>A pointer to a native object.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.Utf8Marshaler.CleanUpNativeData(System.IntPtr)">
            <summary>
            Cleans up native data.
            </summary>
            <param name="nativeData">The native data.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.Utf8Marshaler.GetNativeDataSize">
            <summary>
            Returns the size of the native data to be marshaled.
            </summary>
            <returns>
            The size, in bytes, of the native data.
            </returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.Utf8Marshaler.MarshalNativeToManaged(System.IntPtr)">
            <summary>
            Marshals the native to managed.
            </summary>
            <param name="nativeData">The native data.</param>
            <returns>A managed object.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.Internal.Utf8Marshaler.CleanUpManagedData(System.Object)">
            <summary>
            Cleans up managed data.
            </summary>
            <param name="managedObj">The managed object.</param>
        </member>
        <member name="T:Tobii.Gaze.Core.TrackBox">
            <summary>
            This struct holds a track box
            </summary>
        </member>
        <member name="M:Tobii.Gaze.Core.TrackBox.#ctor(Tobii.Gaze.Core.Internal.DataTypes.InternalTrackBox)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Gaze.Core.TrackBox"/> struct.
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="M:Tobii.Gaze.Core.TrackBox.op_Equality(Tobii.Gaze.Core.TrackBox,Tobii.Gaze.Core.TrackBox)">
            <summary>
            Determines if TrackBox d1 is equal to TrackBox d2.
            </summary>
            <param name="trackBox1">First instance in comparison.</param>
            <param name="trackBox2">Second instance in comparison.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.TrackBox.op_Inequality(Tobii.Gaze.Core.TrackBox,Tobii.Gaze.Core.TrackBox)">
            <summary>
            Determines if TrackBox trackBox1 is not equal to TrackBox trackBox2.
            </summary>
            <param name="trackBox1">First instance in comparison.</param>
            <param name="trackBox2">Second instance in comparison.</param>
            <returns>Returns true if instances are not equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.TrackBox.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Other object instance.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.TrackBox.Equals(Tobii.Gaze.Core.TrackBox)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="other">Other DisplayArea instance.</param>
            <returns>Returns true if instances are equal.</returns>
        </member>
        <member name="M:Tobii.Gaze.Core.TrackBox.GetHashCode">
            <summary>
            Returns the hash code of the instance.
            </summary>
            <returns>The hash code of the instance.</returns>
        </member>
        <member name="P:Tobii.Gaze.Core.TrackBox.FrontUpperRightPoint">
            <summary>
            Gets the front upper right point.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.TrackBox.FrontUpperLeftPoint">
            <summary>
            Gets the front upper left point.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.TrackBox.FrontLowerLeftPoint">
            <summary>
            Gets the front lower left point.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.TrackBox.FrontLowerRightPoint">
            <summary>
            Gets the front lower right point.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.TrackBox.BackUpperRightPoint">
            <summary>
            Gets the back upper right point.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.TrackBox.BackUpperLeftPoint">
            <summary>
            Gets the back upper left point.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.TrackBox.BackLowerLeftPoint">
            <summary>
            Gets the back lower left point.
            </summary>
        </member>
        <member name="P:Tobii.Gaze.Core.TrackBox.BackLowerRightPoint">
            <summary>
            Gets the back lower right point.
            </summary>
        </member>
    </members>
</doc>
